/**
 *  截取小数点后两位
 */
var toFixed = function(value) {
    return value ? value.toFixed(2) : 0;
};

/**
 *  求和    -   单位：亿元
 */
var sum = function(stock, category, index) {
    var i = 0,
        length = index.length,
        total = 0;

    if (category === 0) {
        for (; i < length; i++) {
            total += parseInt(stock[index[i]] || 0);
        }
    } else {
        for (; i < length; i++) {
            total += parseInt(stock[category[i]][index[i]] || 0);
        }
    }

    return (total / 100000000).toFixed(2);
};

/**
 *  两数组分别求和后相减
 */
var subtract = function(array1, index1, array2, index2) {
    var i = 0,
        length = index1.length,
        total1 = 0,
        total2 = 0;

    for (; i < length; i++) {
        total1 += parseInt(array1[index1[i]] || 0);
    }

    i = 0,
        length = index2.length;

    for (; i < length; i++) {
        total2 += parseInt(array2[index2[i]] || 0);
    }

    return ((total1 - total2) / 100000000).toFixed(2);
};

/**
 *  分子分母分别求和后两者相除，计算占比
 */
var proportion = function(stock, category1, index1, category2, index2) {
    var i = 0,
        length = index1.length,
        total1 = 0,
        total2 = 0;

    for (; i < length; i++) {
        total1 += parseInt(stock[category1[i]][index1[i]] || 0);
    }

    i = 0,
        length = index2.length;

    for (; i < length; i++) {
        total2 += parseInt(stock[category2[i]][index2[i]] || 0);
    }

    return (total1 / total2).toFixed(2);
}

/**
 *  分子求和，分母相减后两者相除，计算占比
 */
var substraction = function(stock, category1, index1, minuend, subtractor) {
    var i = 0,
        length = index1.length,
        total1 = 0,
        total2 = 0;

    for (; i < length; i++) {
        total1 += parseInt(stock[category1[i]][index1[i]] || 0);
    }

    total2 = minuend - (subtractor || 0);

    return (total1 / total2).toFixed(2);
};

/**
 *  同比涨幅
 */
var increase = function(minuend, subtractor) {
    return subtractor ? ((minuend - subtractor) * 100 / subtractor).toFixed(2) : 0;
}

/**
 *  单数组内计算同比净额变化，对结果求和
 *      history - 数据源
 *      category - 表格来源数组（如资产负债表、利润表、现金流量表、指标表）
 *      index - 对应表格的科目数组
 *      last    -   最近一期年报
 *      offset  -   对比年报偏移量
 *      addend - 额外值
 */
var singleOffset = function(history, category, index, last, offset, addend) {
    var i = 0,
        sum = 0;

    for (; i < index.length; i++) {
        sum += (history[category[i]][last][index[i]] - history[category[i]][last - offset][index[i]])
    }

    if (addend) {
        sum += addend
    }

    return sum;
}

/**
 *  两数组分别计算同比净额变化，分别对结果求和后相减
 *      history - 数据源
 *      category1 - （减数）资产负债表、利润表、现金流量表
 *      index1 - 参数
 *      category2 - （被减数）资产负债表、利润表、现金流量表
 *      index2 - 参数
 *      last    -   最近一期年报
 *      offset  -   对比年报偏移量      
 */
var doubleOffset = function(history, category1, index1, category2, index2, last, offset) {
    var sum1 = 0,
        sum2 = 0,
        i = 0;

    for (; i < index1.length; i++) {
        sum1 += (history[category1[i]][last][index1[i]] - history[category1[i]][last - offset][index1[i]])
    }

    for (i = 0; i < index2.length; i++) {
        sum2 += (history[category2[i]][last][index2[i]] - history[category2[i]][last - offset][index2[i]])
    }

    return sum1 - sum2;
}

module.exports = {
    toFixed: toFixed,
    sum: sum,
    subtract: subtract,
    proportion: proportion,
    substraction: substraction,
    increase: increase,
    singleOffset: singleOffset,
    doubleOffset: doubleOffset
}